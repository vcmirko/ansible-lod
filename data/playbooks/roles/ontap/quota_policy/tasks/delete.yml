---
- name: "Role - ontap/quota_policy/delete"
  block:
  - name: Set authentication facts
    no_log: true
    set_fact:
      auth: &auth
        hostname: "{{ auth_rest.hostname | default(omit) }}"
        username: "{{ auth_rest.username | default(omit) }}"
        password: "{{ auth_rest.password | default(omit) }}"
        key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
        cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
        validate_certs: "{{ auth_rest.validate_certs | default(false) }}"
        https: "{{ auth_rest.https | default(false) }}"
        use_rest: always

  # logging
  - name: Logging
    set_fact:
      l_cluster:             "{{ cluster             | to_nice_yaml(2) | indent(2,true) | do_log('ontap/quota_policy/delete','cluster',qlogname) }}"
      l_svm:                 "{{ svm                 | to_nice_yaml(2) | indent(2,true) | do_log('','svm',qlogname) }}"
      l_quota_policy:        "{{ quota_policy        | to_nice_yaml(2) | indent(2,true) | do_log('','quota_policy',qlogname) }}"

  - name: "Delete Quota Policy [{{ quota_policy.name }}]"
    na_ontap_rest_cli_idempotent:
      command: "volume/quota/policy"
      verb: DELETE
      params: 
        policy_name: "{{ quota_policy.name }}"
        vserver: "{{ svm.name }}"
      <<: *auth
      idempotency_params:
        precheck:
          rest_cli:
            command: "volume/quota/policy"
            verb: GET
            params:
              policy_name: "{{ quota_policy.name }}"
              vserver: "{{ svm.name }}"
          skip_main_command:
            num_records: "==0"
    delegate_to: localhost
    register: quota_policy_result

  - name: "Fail on non-duplicate error"
    fail:
      msg: "{{ quota_policy_result }}"
    when: quota_policy_result.failed and "duplicate" not in quota_policy_result.msg

  when: 
  - quota_policy.name | default(false)
  - svm.name | default(false)


