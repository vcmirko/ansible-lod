---
- name: "Role - ontap/svm/delete_snapmirrors_on_cluster"
  block:
  - name: Get source info
    set_fact:
      remote_cluster_info: "{{ clusters | selectattr('name', 'equalto', remote_cluster) | first }}"

  - set_fact:
      no_log: true
      auth: &auth
        hostname: "{{ remote_cluster_info.management_ip }}"
        username: "{{ auth_rest.username | default(omit) }}"
        password: "{{ auth_rest.password | default(omit) }}"
        key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
        cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
        validate_certs: "{{ auth_rest.validate_certs | default(false) }}"
        https: "{{ auth_rest.https | default(true) }}"
        use_rest: always

  - name: "Get snapmirror relations from [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - snapmirror/relationships
      use_python_keys: true
      parameters:
        source.svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: sm_info_out

  - name: "Remove snapmirror relations from [{{ svm.name }}]"
    netapp.ontap.na_ontap_restit:
      <<: *auth
      method: delete
      api: "snapmirror/relationships/{{ snapmirror.uuid }}"
      query:
        return_timeout: 30   
    delegate_to: localhost 
    loop: "{{ sm_info_out.ontap_info.snapmirror_relationships.records | list }}"
    loop_control:
      loop_var: snapmirror
      label: "{{ snapmirror.uuid }}"
    when:
      - sm_info_out.ontap_info.snapmirror_relationships.num_records | default(0) > 0

  when:
  - remote_cluster | default(false)
  - svm.name | default(false)