---
############################################
# Delete SVM
# To be able to remove all snapmirrors and peers
# you must also pass the list "clusters"
# it should be a list of dics having the 'name' and 'management_ip' of each cluster
############################################
- set_fact:
    auth: &auth
      hostname: "{{ auth_rest.hostname | default(omit) }}"
      username: "{{ auth_rest.username | default(omit) }}"
      password: "{{ auth_rest.password | default(omit) }}"
      key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
      cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
      validate_certs: "{{ auth_rest.validate_certs | default(false) }}"
      https: "{{ auth_rest.https | default(true) }}"
      use_rest: always

# since this is a delete action we need to check if the svm is there
- name: "Search svm [{{ svm.name }}]"
  netapp.ontap.na_ontap_rest_info:
    gather_subset: 
    - svm/svms
    use_python_keys: true
    parameters:
      name: "{{ svm.name }}"
    <<: *auth
  delegate_to: localhost
  register: svm_info

- name: "Role - ontap/svm/delete"
  block:
  # logging
  - set_fact:
      l_cluster:    "{{ cluster    | to_nice_yaml(2) | indent(2,true) | do_log('ontap/svm/delete','cluster',qlogname) }}"
      l_svm:        "{{ svm        | to_nice_yaml(2) | indent(2,true) | do_log('','svm',qlogname) }}"

  # get snapmirror relationship peers
  - name: "Get svm peers from [{{ svm.name }}]" 
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - svm/peers
      use_python_keys: true
      parameters:
        peer.svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: peer_info

  - name: "Get svm peers to [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - svm/peers
      use_python_keys: true
      fields: "*"
      parameters:
        svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: peer_info_out

  # merge sm_info_out into sm_info
  - set_fact:
      peer_list: "{{ peer_info.ontap_info.svm_peers.records + peer_info_out.ontap_info.svm_peers.records }}"

  - name: Flatten remote cluster names from peer relations
    set_fact:
      remote_clusters: "{{ peer_list | map(attribute='peer.cluster.name') | list }}"

  - name: loop through remote clusters
    include_tasks: delete_snapmirrors_on_cluster.yml
    loop: "{{ remote_clusters }}"
    loop_control:
      loop_var: remote_cluster
      label: "{{ remote_cluster }}"

  # do the same on local cluster
  - name: "Get snapmirror relations to [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - snapmirror/relationships
      use_python_keys: true
      parameters:
        destination.svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: sm_info

  - name: "Remove snapmirror relations to [{{ svm.name }}]"
    netapp.ontap.na_ontap_restit:
      <<: *auth
      method: delete
      api: "snapmirror/relationships/{{ snapmirror.uuid }}"
      query:
        return_timeout: 30
    delegate_to: localhost
    loop: "{{ sm_info.ontap_info.snapmirror_relationships.records | list }}"
    loop_control:
      loop_var: snapmirror
      label: "{{ snapmirror.uuid }}"
    when:
      - sm_info.ontap_info.snapmirror_relationships.num_records | default(0) > 0

  - name: "Get all LUN mappings [{{ svm.name }}]" 
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "protocols/san/lun-maps"
      use_python_keys:            true
      parameters: 
        svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: lun_map_info

  - name: "Remove all LUN mappings [{{ svm.name }}]" 
    netapp.ontap.na_ontap_lun_map:
      state:                    absent
      vserver:                  "{{ lun_map.svm.name }}"
      initiator_group_name:     "{{ lun_map.igroup.name }}"
      path:                     "{{ lun_map.lun.name }}"
      <<: *auth
    delegate_to: localhost
    loop_control:
      label: "{{ lun_map.svm.name }} - {{ lun_map.igroup.name }} - {{ lun_map.lun.name }}"
      loop_var: lun_map
    loop:
      "{{ lun_map_info.ontap_info.protocols_san_lun_maps.records | default([]) }}"
    when:
      - lun_map_info.ontap_info.protocols_san_lun_maps.num_records|int > 0  
      - lun_map.igroup.name | default(false)
      - lun_map.lun.name | default(false)
      - lun_map.svm.name | default(false)  

  - name: "Get all LUNs [{{ svm.name }}]" 
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "storage/luns"
      fields:
        - "svm"
      use_python_keys:          true
      parameters: 
        svm.name: "{{ svm.name }}"    
      <<: *auth
    delegate_to: localhost
    register: lun_info

  - name: "Remove all LUNs [{{ svm.name }}]"
    netapp.ontap.na_ontap_lun:
      state:                    absent
      vserver:                  "{{ lun.svm.name }}"
      name:                     "{{ lun.name.split('/')[-1] }}"
      flexvol_name:             "{{ lun.name.split('/')[-2] }}"
      <<: *auth
    delegate_to: localhost
    loop_control:
      label: "{{ lun.svm.name }} - {{ lun.name }}"
      loop_var: lun
    loop:
      "{{ lun_info.ontap_info.storage_luns.records }}"
    when:
      - lun_info.ontap_info.storage_luns.num_records|int > 0    
      - lun.name | default(false)
      - lun.svm.name | default(false)

  - name: "Get all iGroups [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "protocols/san/igroups"
      use_python_keys:          true
      parameters: 
        svm.name: "{{ svm.name }}"    
      <<: *auth
    delegate_to: localhost
    register: igroup_info

  - name: "Remove all iGroups [{{ svm.name }}]"
    netapp.ontap.na_ontap_igroup:
      state:                    absent
      vserver:                  "{{ igroup.svm.name }}"
      name:                     "{{ igroup.name }}"
      <<: *auth
    delegate_to: localhost
    loop_control:
      label: "{{ igroup.svm.name }} - {{ igroup.name }}"
      loop_var: igroup
    loop:
      "{{ igroup_info.ontap_info.protocols_san_igroups.records }}"
    when:
      - igroup_info.ontap_info.protocols_san_igroups.num_records|int > 0
      - igroup.name | default(false)
      - igroup.svm.name | default(false)

  - name: "Get all non-root volumes [{{ svm.name }}]" 
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "storage/volumes"
      fields:
        - "svm"
      parameters:
        is_svm_root:            false
        svm.name: "{{ svm.name }}"          
      use_python_keys:          true
      <<: *auth
    delegate_to: localhost
    register: vol_info

  - name: "Delete all volumes [{{ svm.name }}]" 
    netapp.ontap.na_ontap_volume:
      state:                    absent
      name:                     "{{ volume.name }}"
      vserver:                  "{{ volume.svm.name }}" 
      wait_for_completion:      true
      <<: *auth
    delegate_to: localhost
    loop_control:
      label: "{{ volume.svm.name }} - {{ volume.name }}"
      loop_var: volume
    loop:
      "{{ vol_info.ontap_info.storage_volumes.records }}"
    when:
      - vol_info.ontap_info.storage_volumes.num_records|int > 0   
      - volume.name | default(false)
      - volume.svm.name | default(false) 

  - name: "Get SVM CIFS server [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "protocols/cifs/services"
      fields:
        - "*"
      use_python_keys:          true
      parameters: 
        svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: cifs_service_info

  - name: "Delete SVM CIFS server [{{ svm.name }}]"
    netapp.ontap.na_ontap_cifs_server:
      state:                    absent
      name:                     "{{ cifs_server.name }}"                  
      vserver:                  "{{ cifs_server.svm.name }}"
      domain:                   "{{ cifs_server.ad_domain.fqdn }}"
      ou:                       "{{ cifs_server.ad_domain.organizational_unit }}"
      admin_user_name:          "{{ ad_username }}"
      admin_password:           "{{ ad_password }}"
      force: true
      <<: *auth
    delegate_to: localhost
    loop:
      "{{ cifs_service_info.ontap_info.protocols_cifs_services.records }}"
    loop_control:
      loop_var: cifs_server
      label: "{{ cifs_server.svm.name }} - {{ cifs_server.name }}"
    when:
    - cifs_service_info.ontap_info.protocols_cifs_services.num_records|int > 0
    - cifs_server.name | default(false)
    - cifs_server.svm.name | default(false)

  - name: "Get all SVM interfaces [{{ svm.name }}]" 
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "network/ip/interfaces"
      fields:
        - "svm"
        - "scope"
        - "service_policy"
      parameters:
        scope:                  "svm"
        svm.name: "{{ svm.name }}"      
      use_python_keys:          true
      <<: *auth
    delegate_to: localhost
    register: svm_ip_int_info

  - name: "Delete all SVM interfaces [{{ svm.name }}]" 
    netapp.ontap.na_ontap_interface:
      state:                    absent
      interface_name:           "{{ data_lif.name }}"
      vserver:                  "{{ data_lif.svm.name }}"
      <<: *auth
    delegate_to: localhost
    loop:
      "{{ svm_ip_int_info.ontap_info.network_ip_interfaces.records }}"
    loop_control:
      loop_var: data_lif
      label: "{{ data_lif.svm.name }} - {{ data_lif.name }}"
    when:
      - svm_ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
      - data_lif.name | default(false)
      - data_lif.svm.name | default(false)
      - data_lif.scope == "svm"
    

  - name: "Get all snapmirror policies [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "snapmirror/policies"
      fields:
        - "name"
        - "scope"
        - "svm"
      parameters:
        scope:                  "svm"
        svm.name: "{{ svm.name }}"
      use_python_keys:          true
      <<: *auth
    delegate_to: localhost
    register: snapmirror_policy_info

  - name: "Delete all snapmirror policies [{{ svm.name }}]"    
    netapp.ontap.na_ontap_snapmirror_policy:
      state            : absent
      vserver          : "{{ snapmirror_policy.svm.name }}"
      name             : "{{ snapmirror_policy.name }}"
      <<: *auth
    delegate_to: localhost
    loop:
      "{{ snapmirror_policy_info.ontap_info.snapmirror_policies.records }}"
    loop_control:
      loop_var: snapmirror_policy
      label: "{{ snapmirror_policy.svm.name }} - {{ snapmirror_policy.name }}"
    when:
      - snapmirror_policy_info.ontap_info.snapmirror_policies.num_records|int > 0
      - snapmirror_policy.name | default(false)
      - snapmirror_policy.svm.name | default(false)
      - snapmirror_policy.scope == "svm"

  - name: "Get svm peers [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - svm/peers
      use_python_keys: true
      parameters:
        peer.svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: peer_info

  - name: "Get svm peers out [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - svm/peers
      use_python_keys: true
      fields: "*"
      parameters:
        svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: peer_info_out

  - name: "Remove svm peers [{{ svm.name }}]"
    netapp.ontap.na_ontap_restit:
      <<: *auth
      method: delete
      api: "svm/peers/{{ peer.uuid }}"
      query:
        return_timeout: 30
    delegate_to: localhost
    loop: "{{ peer_info.ontap_info.svm_peers.records | list }}"
    loop_control:
      loop_var: peer
      label: "{{ peer.uuid }}"
    when:
      - peer_info.ontap_info.svm_peers.num_records | default(0) > 0

  - name: "Remove svm peers out [{{ svm.name }}]"
    netapp.ontap.na_ontap_restit:
      <<: *auth
      method: delete
      api: "svm/peers/{{ peer.uuid }}"
      query:
        return_timeout: 30
    delegate_to: localhost
    loop: "{{ peer_info_out.ontap_info.svm_peers.records | list }}"
    loop_control:
      loop_var: peer
      label: "{{ peer.uuid }}"
    when:
      - peer_info_out.ontap_info.svm_peers.num_records | default(0) > 0

  - name: "Delete svm [{{ svm.name }}]"
    netapp.ontap.na_ontap_svm:
      state:                    absent
      name:                     "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    retries: 3
    delay: 10
  when:
  - svm_info.ontap_info.svm_svms.num_records | default(0) > 0
  - svm.name | default(false)