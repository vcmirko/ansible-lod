---
############################################
# Delete SVM
# To be able to remove all snapmirrors and peers
# you must also pass the list "clusters"
# it should be a list of dics having the 'name' and 'management_ip' of each cluster
############################################
- name: "Role - ontap/svm/delete"
  block:
  - name: Clean svm [{{ svm.name }}]
    include_tasks: clean.yml

  - name: Set authentication facts
    no_log: true
    set_fact:
      auth: &auth
        hostname: "{{ auth_rest.hostname | default(omit) }}"
        username: "{{ auth_rest.username | default(omit) }}"
        password: "{{ auth_rest.password | default(omit) }}"
        key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
        cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
        validate_certs: "{{ auth_rest.validate_certs | default(false) }}"
        https: "{{ auth_rest.https | default(true) }}"
        use_rest: always


  - name: "Get SVM CIFS server [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "protocols/cifs/services"
      fields:
        - "*"
      use_python_keys:          true
      parameters: 
        svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: cifs_service_info

  - name: "Delete SVM CIFS server [{{ svm.name }}]"
    netapp.ontap.na_ontap_cifs_server:
      state:                    absent
      name:                     "{{ cifs_server.name }}"                  
      vserver:                  "{{ cifs_server.svm.name }}"
      domain:                   "{{ cifs_server.ad_domain.fqdn }}"
      ou:                       "{{ cifs_server.ad_domain.organizational_unit }}"
      admin_user_name:          "{{ ad_username }}"
      admin_password:           "{{ ad_password }}"
      force: true
      <<: *auth
    delegate_to: localhost
    loop:
      "{{ cifs_service_info.ontap_info.protocols_cifs_services.records }}"
    loop_control:
      loop_var: cifs_server
      label: "{{ cifs_server.svm.name }} - {{ cifs_server.name }}"
    when:
    - cifs_service_info.ontap_info.protocols_cifs_services.num_records|int > 0
    - cifs_server.name | default(false)
    - cifs_server.svm.name | default(false)

  - name: "Get all SVM interfaces [{{ svm.name }}]" 
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "network/ip/interfaces"
      fields:
        - "svm"
        - "scope"
        - "service_policy"
      parameters:
        scope:                  "svm"
        svm.name: "{{ svm.name }}"      
      use_python_keys:          true
      <<: *auth
    delegate_to: localhost
    register: svm_ip_int_info

  - name: "Delete all SVM interfaces [{{ svm.name }}]" 
    netapp.ontap.na_ontap_interface:
      state:                    absent
      interface_name:           "{{ data_lif.name }}"
      vserver:                  "{{ data_lif.svm.name }}"
      <<: *auth
    delegate_to: localhost
    loop:
      "{{ svm_ip_int_info.ontap_info.network_ip_interfaces.records }}"
    loop_control:
      loop_var: data_lif
      label: "{{ data_lif.svm.name }} - {{ data_lif.name }}"
    when:
      - svm_ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
      - data_lif.name | default(false)
      - data_lif.svm.name | default(false)
      - data_lif.scope == "svm"
    

  - name: "Get all snapmirror policies [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "snapmirror/policies"
      fields:
        - "name"
        - "scope"
        - "svm"
      parameters:
        scope:                  "svm"
        svm.name: "{{ svm.name }}"
      use_python_keys:          true
      <<: *auth
    delegate_to: localhost
    register: snapmirror_policy_info

  - name: "Delete all snapmirror policies [{{ svm.name }}]"    
    netapp.ontap.na_ontap_snapmirror_policy:
      state            : absent
      vserver          : "{{ snapmirror_policy.svm.name }}"
      name             : "{{ snapmirror_policy.name }}"
      <<: *auth
    delegate_to: localhost
    loop:
      "{{ snapmirror_policy_info.ontap_info.snapmirror_policies.records }}"
    loop_control:
      loop_var: snapmirror_policy
      label: "{{ snapmirror_policy.svm.name }} - {{ snapmirror_policy.name }}"
    when:
      - snapmirror_policy_info.ontap_info.snapmirror_policies.num_records|int > 0
      - snapmirror_policy.name | default(false)
      - snapmirror_policy.svm.name | default(false)
      - snapmirror_policy.scope == "svm"

  - name: "Get svm peers [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - svm/peers
      use_python_keys: true
      parameters:
        peer.svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: peer_info

  - name: "Get svm peers out [{{ svm.name }}]"
    netapp.ontap.na_ontap_rest_info:
      gather_subset: 
      - svm/peers
      use_python_keys: true
      fields: "*"
      parameters:
        svm.name: "{{ svm.name }}"
      <<: *auth
    delegate_to: localhost
    register: peer_info_out

  - name: "Remove svm peers [{{ svm.name }}]"
    netapp.ontap.na_ontap_restit:
      <<: *auth
      method: delete
      api: "svm/peers/{{ peer.uuid }}"
      query:
        return_timeout: 30
    delegate_to: localhost
    loop: "{{ peer_info.ontap_info.svm_peers.records | list }}"
    loop_control:
      loop_var: peer
      label: "{{ peer.uuid }}"
    when:
      - peer_info.ontap_info.svm_peers.num_records | default(0) > 0

  - name: "Remove svm peers out [{{ svm.name }}]"
    netapp.ontap.na_ontap_restit:
      <<: *auth
      method: delete
      api: "svm/peers/{{ peer.uuid }}"
      query:
        return_timeout: 30
    delegate_to: localhost
    loop: "{{ peer_info_out.ontap_info.svm_peers.records | list }}"
    loop_control:
      loop_var: peer
      label: "{{ peer.uuid }}"
    when:
      - peer_info_out.ontap_info.svm_peers.num_records | default(0) > 0



  - name: "Delete svm [{{ svm.name }}]"
    netapp.ontap.na_ontap_svm:
      state:                    absent
      name:                     "{{ svm.name }}"
      force:                   true
      <<: *auth
    delegate_to: localhost
    retries: 3
    delay: 10
    when:
    - svm_info.ontap_info.svm_svms.num_records | default(0) > 0
  when:
  - svm.name | default(false)