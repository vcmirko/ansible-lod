---
- debug: var=ansible_check_mode
- name : "Role ontap/volume/create"
  block:
  - set_fact:
      auth: &auth
        hostname: "{{ auth_rest.hostname | default(omit) }}"
        username: "{{ auth_rest.username | default(omit) }}"
        password: "{{ auth_rest.password | default(omit) }}"
        key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
        cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
        validate_certs: "{{ auth_rest_validate_certs | default(false) }}"
        use_rest: always
    no_log: true

  # logging
  - set_fact:
      l_cluster: "{{ cluster | to_nice_yaml(2) | indent(2,true) | do_log('ontap/volume/create','cluster',qlogname) }}"
      l_svm:     "{{ svm     | to_nice_yaml(2) | indent(2,true) | do_log('','svm',qlogname) }}"
      l_volume:  "{{ volume  | to_nice_yaml(2) | indent(2,true) | do_log('','volume',qlogname) }}"

  # get best aggregate
  - name: "Find best aggregate [{{ volume.name }}]" 
    get_best_aggregate:
        <<: *auth
        volume_name              : "{{ volume.name }}"
        svm_name                 : "{{ svm.name }}"
        debug                    : True
        size_mb                  : "{{ volume.size | default(0) }}"
        weight_volume_count      : 0
        weight_used_pct          : 0
        weight_provisioned_pct   : 0
        weight_available_space   : 1
        # threshold_volume_count   : 
        # threshold_used_pct       : 
        # threshold_provisioned_pct: 10000000
        # threshold_available_space: 
        # exclude_name_regex       : 
        # include_name_regex       : "^{{ volume.aggregate_include_name_regex | default('.*') }}$"
        # exclude_node_regex       : 
        include_node_regex         : "{{ volume.aggregate_include_node_regex | default('.*') }}"
        # names_to_exclude         :
        # nodes_to_exclude         : 
    register: aggr_lookup
    delegate_to: localhost

  # create the volume
  - name: "Create volume [{{ volume.name }}]"
    netapp.ontap.na_ontap_volume:
      <<: *auth  
      state: present
      vserver:                 "{{ svm.name }}"    
      name:                    "{{ volume.name }}"
      is_infinite: False
      aggregate_name                  : "{{ aggr_lookup.aggregate.name    | default(omit) }}"
      size                            : "{{ volume.size                   | default(omit) }}"
      size_unit                       : "{{ volume.size_unit              | default(omit) }}"
      space_guarantee                 : "{{ volume.space_guarantee        | default(omit) }}"
      percent_snapshot_space          : "{{ volume.percent_snapshot_space | default(omit) }}"
      wait_for_completion             : "{{ volume.wait_for_completion    | default(omit) }}"
      junction_path                   : "{{ volume.junction_path          | default(omit) }}"
      language                        : "{{ volume.language               | default(omit) }}"
      comment                         : "{{ volume.comment                | default(omit) }}"
      type                            : "{{ volume.type                   | default(omit) }}"
    # atime_update                    : "{{ volume.atime_update           | default(omit) }}" # bad rest implementation
      compression                     : "{{ volume.compression            | default(omit) }}"
      encrypt                         : "{{ volume.encrypt                | default(omit) }}"
      group_id                        : "{{ volume.group_id               | default(omit) }}"
      inline_compression              : "{{ volume.inline_compression     | default(omit) }}"
      size_change_threshold           : "{{ volume.size_change_threshold  | default(omit) }}"
      unix_permissions                : "{{ volume.unix_permissions       | default(omit) }}"
      user_id                         : "{{ volume.user_id                | default(omit) }}"
      volume_security_style           : "{{ volume.security_style         | default(omit) }}"
      snaplock                        : "{{ volume.snaplock               | default(omit) }}"
      volume_space_logical_reporting  : "{{ volume.logical_space_reporting | default(omit) }}"
      volume_space_logical_enforcement: "{{ volume.logical_space_enforcement | default(omit) }}"
      efficiency_policy               : "{{ volume.efficiency_policy.name        | default(omit) }}"
      export_policy                   : "{{ volume.export_policy.name            | default(omit) }}"
      snapshot_policy                 : "{{ volume.snapshot_policy.name          | default(omit) }}"
      tiering_policy                  : "{{ volume.tiering_policy.name           | default(omit) }}"
      qos_policy_group                : "{{ volume.qos_policy_group.name         | default(omit) }}"
    delegate_to: localhost

  # set effeciency
  - name: "Set efficiency [{{ volume.name }}]"
    netapp.ontap.na_ontap_volume_efficiency:
      state: present
      vserver:                   "{{ svm.name }}"    
      volume_name:               "{{ volume.name }}"
      enable_compression:        "{{ volume.volume_efficiency.enable_compression         | default(omit) }}"
      enable_data_compaction:    "{{ volume.volume_efficiency.enable_data_compaction     | default(omit) }}"
      enable_inline_compression: "{{ volume.volume_efficiency.enable_inline_compression  | default(omit) }}"
      enable_inline_dedupe:      "{{ volume.volume_efficiency.enable_inline_dedupe       | default(omit) }}"
      policy:                    "{{ volume.volume_efficiency.policy                     | default(omit) }}"
      schedule :                 "{{ volume.volume_efficiency.schedule                   | default(omit) }}"
      volume_efficiency :        "{{ volume.volume_efficiency.volume_efficiency          | default(omit) }}"
      <<: *auth
    delegate_to: localhost

  # set compression / no rest support
  - name: "Set compression type [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'volume/efficiency'
      verb: 'PATCH'
      params: 
        vserver: '{{ svm.name }}'
        volume: '{{ volume.name }}'
      body: 
        compression_type: "{{ volume.volume_efficiency.compression_type | default(omit) }}"
        compression: true
      <<: *auth
    delegate_to: localhost
    when: 
    - volume.volume_efficiency.compression_type | default(false) 
    - volume.volume_efficiency.enable_compression | default(false)

  # set efficiency schedule
  - name: "Set efficiency schedule [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'volume/efficiency'
      verb: 'PATCH'
      params: 
        vserver: '{{ svm.name }}'
        volume: '{{ volume.name }}'
      body: 
        schedule : "{{ volume.volume_efficiency.schedule                  | default(omit) }}"      
      <<: *auth
    delegate_to: localhost
    when: 
    - volume.volume_efficiency.schedule | default(false)

  # set autosize
  - name: "Set volume autosize [{{ volume.name }}]"     
    netapp.ontap.na_ontap_volume_autosize:
      volume                  : "{{ volume.name }}"
      vserver                 : "{{ svm.name }}"
      grow_threshold_percent  : "{{ volume.volume_autosize.grow_threshold_percent   | default(omit) }}"
      #increment_size         : "{{ volume.volume_autosize.increment_size           | default(omit) }}"
      maximum_size            : "{{ volume.volume_autosize.maximum_size             | default(omit) }}"
      minimum_size            : "{{ volume.volume_autosize.minimum_size             | default(omit) }}"
      mode                    : "{{ volume.volume_autosize.mode                     | default(omit) }}"
      shrink_threshold_percent: "{{ volume.volume_autosize.shrink_threshold_percent | default(omit) }}"
      <<: *auth
    delegate_to: localhost
    when:
    - volume.volume_autosize | default(false)

  # set snapshot autodelete / no rest support
  - name: "Set volume snapshot autodelete [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'snapshot/autodelete'
      verb: 'PATCH'
      params: 
        volume: '{{ volume.name }}'
        vserver: '{{ svm.name }}'
      body: 
        enabled:                 "{{ volume.snapshot_autodelete.enabled                 | default(omit) }}"
        commitment:              "{{ volume.snapshot_autodelete.commitment              | default(omit) }}"
        defer_delete:            "{{ volume.snapshot_autodelete.defer_delete            | default(omit) }}"
        delete_order:            "{{ volume.snapshot_autodelete.delete_order            | default(omit) }}"
        defer_delete_prefix:     "{{ volume.snapshot_autodelete.defer_delete_prefix     | default(omit) }}"
        target_free_space:       "{{ volume.snapshot_autodelete.target_free_space       | default(omit) }}"
        trigger:                 "{{ volume.snapshot_autodelete.trigger                 | default(omit) }}"
        destroy_list:            "{{ volume.snapshot_autodelete.destroy_list            | default(omit) }}"
      <<: *auth
    delegate_to: localhost
    when: 
    - volume.snapshot_autodelete | default(false)

  # set space-mgmt-try-first
  - name: "Set space-mgmt-try-first [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'volume'
      verb: 'PATCH'
      params: {'volume': '{{ volume.name }}','vserver': '{{ svm.name }}'}
      body: {'space_mgmt_try_first': '{{ volume.space_mgmt_try_first }}'}
      <<: *auth
    delegate_to: localhost
    when: 
    - volume.space_mgmt_try_first | default(false) 

  # get volume uuid for further operations using the uuid and restit
  - name: "Get volume uuid [{{ volume.name }}]"
    netapp.ontap.na_ontap_restit:
      api: /storage/volumes
      method: GET
      query:
        svm.name: "{{ svm.name }}"
        name: "{{ volume.name }}"
      <<: *auth
    delegate_to: localhost
    register: volume_info
    when:
    - not ansible_check_mode

  # set anti-ransomware state
  - name: "Set anti-ransomware state [{{ volume.name }}]"
    netapp.ontap.na_ontap_restit:
      api: /storage/volumes/{{ volume_info.response.records[0].uuid }}
      method: PATCH
      body:
        anti_ransomware:
          state: "{{ volume.anti_ransomware_state }}"
      <<: *auth
    delegate_to: localhost      
    when: 
    - volume_info.response.num_records > 0
    - volume.anti_ransomware_state | default(false)
    - not ansible_check_mode

  # set read alloc / no rest support
  - name: "Set read-alloc [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'volume'
      verb   : 'PATCH'
      params : {'volume': '{{ volume.name }}','vserver': '{{ svm.name }}'}
      body   : {'read_realloc': '{{ volume.read_realloc }}'}
      <<: *auth
    delegate_to: localhost
    when: 
    - volume.read_realloc | default(false) 
    - not ansible_check_mode    

  # set fractional reserve / no rest support
  - name: "Set fractional-reserve [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'volume'
      verb   : 'PATCH'
      params : {'volume': '{{ volume.name }}','vserver': '{{ svm.name }}'}
      body   : {'fractional_reserve': '{{ volume.fractional_reserve }}'}
      <<: *auth
    delegate_to: localhost
    when: 
    - volume.fractional_reserve | default(false) 
    - not ansible_check_mode

  # set atime-update / no rest support - or bad implementation / to review in new versions
  - name: "Set atime-update [{{ volume.name }}]"
    netapp.ontap.na_ontap_rest_cli:
      command: 'volume'
      verb   : 'PATCH'
      params : {'volume': '{{ volume.name }}','vserver': '{{ svm.name }}'}
      body   : {'atime_update': '{{ volume.atime_update }}'}
      <<: *auth
    delegate_to: localhost      
    when: 
    - volume.atime_update | default(false)
    - not ansible_check_mode

    ## Create qtrees
    ## We execute create_one.yml from the qtree role
    ## svm, cluster are already processed in this master role, we just need to set the qtree_item as loopvar
  - name: "Create qtrees [{{ volume.name }}]"     
    include_tasks: "{{ playbook_dir }}/roles/ontap/qtree/tasks/create_one.yml"
    loop_control:
      loop_var: qtree_item
      label: "Creating qtree {{ qtree_item.name }}"
    loop: "{{ volume.qtrees | default([]) }}" 
    when: 
    - volume.qtrees | default(false)


    ## Create luns
    ## We execute create_one.yml from the lun role
    ## svm, cluster are already processed in this master role, we just need to set the lun_item as loopvar
  - name: "Create luns [{{ volume.name }}]"    
    include_tasks: "{{ playbook_dir }}/roles/ontap/lun/tasks/create_one.yml"
    loop_control:
      loop_var: lun_item
      label: "Creating lun {{ lun_item.name }}"
    loop: "{{ volume.luns | default([]) }}"  
    when: 
    - volume.luns | default(false)   
  when:  
  - volume.name | default(false)
  - svm.name | default(false)    
