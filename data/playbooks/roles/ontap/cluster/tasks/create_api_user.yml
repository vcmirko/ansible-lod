---
  # To create an API user with certificate, we need password authentication 
  # so this task will require the ontap credentials to be passed
- name: "Role - ontap/cluster/create_api_user.yml"
  block:
  - name: Set authentication facts
    no_log: true
    set_fact:
      auth: &auth
        hostname      : "{{ netapp_hostname }}"
        username      : "{{ netapp_username }}"
        password      : "{{ netapp_password }}"
        use_rest      : always
        validate_certs: false

      # the goals is after this step to used auth_cert to authenticate with the certificate  
      auth_cert: &auth_cert
        hostname      : "{{ netapp_hostname }}"
        key_filepath  : "{{ cluster_api_key_filepath }}"
        cert_filepath : "{{ cluster_api_cert_filepath }}"
        use_rest      : always
        validate_certs: false

    # logging
  - name: Logging
    set_fact:
      l_cluster: "{{ cluster | to_nice_yaml(2) | indent(2,true) | do_log('ontap/cluster/create_api_user','cluster',qlogname) }}"

  - name: check if the certificate exists
    stat:
      path: "{{ cluster_api_cert_filepath }}"
    register: cert_file_stat
    delegate_to: localhost


  # the filters get_expiry_date and diff_datetime are custom filters that are defined in the filter_plugins folder
  # they are custom filters that are used to get the expiry date of a certificate and the difference between the expiry date and the current date
  - name: get expiry days from certificate 
    set_fact:
      expiry_diff: "{{ lookup('file', cluster_api_cert_filepath) | get_expiry_date(asString=True) | diff_datetime(invert=True) }}"
    when: cert_file_stat.stat.exists
    delegate_to: localhost

  - name: renew the certificate if the expiry date is due to renewal
    block:
      # create the root ca to sign the certificates
    - name: create root ca  
      netapp.ontap.na_ontap_security_certificates:
        <<: *auth
        common_name: "{{ cluster.ca_cert_name | default('cluster_root_ca') }}"
        type: root_ca
        expiry_time: "P{{ cluster.ca_cert_expiry_days | default(3650) }}DT"     
      delegate_to: localhost

      # disable/enable client authentication - sometimes needed and in this case, making sure client auth is on
    - name: disable client authentication
      netapp.ontap.na_ontap_rest_cli:
        <<: *auth
        command: security/ssl
        verb: PATCH
        params: 
          vserver: "{{ cluster.name | default(inventory_hostname) }}"
        body:
          client_enabled: false
      delegate_to: localhost
    - name: enable client authentication
      netapp.ontap.na_ontap_rest_cli:
        <<: *auth
        command: security/ssl
        verb: PATCH
        params: 
          vserver: "{{ cluster.name | default(inventory_hostname) }}"
        body:
          client_enabled: true
      delegate_to: localhost      

      # get the root ca certificate and check if it is created
    - name: get the root ca certificate
      netapp.ontap.na_ontap_rest_info:
          <<: *auth
          use_python_keys: true
          fields:
            - common_name
          gather_subset:
            - security/certificates
          parameters:
            name: "{{ cluster.ca_cert_name | default('cluster_root_ca') }}"
      register: root_ca_info
      delegate_to: localhost

    - assert:
        that:
          - root_ca_info.ontap_info.security_certificates.num_records == 1
        fail_msg: "Failed to create root CA"
        success_msg: "Root CA created successfully"

      # make a new certificate signing request
    - name: Create a certificate signing request
      netapp.ontap.na_ontap_rest_cli:
        command: /security/certificate/generate-csr
        verb: POST
        body:
          common_name: "{{ cluster_api_username }}" 
        <<: *auth
      register: csr_output
      delegate_to: localhost

      # double check if the csr is generated
    - assert:
        that:
          - csr_output is defined
          - csr_output.msg.cli_output != ""
        fail_msg: "Failed to generate CSR"
        success_msg: "CSR generated successfully"

      # parse the csr
      # the parse_pem_output is a custom filter that is defined in the filter_plugins folder
    - name: get the csr
      set_fact: 
        csr: "{{ csr_output.msg.cli_output | parse_pem_output('CERTIFICATE REQUEST') }}"

      # sign the certificate
    - name: signing certificate using newly created certificate
      tags: sign_request
      netapp.ontap.na_ontap_security_certificates:
        <<: *auth
        common_name: "{{ root_ca_info.ontap_info.security_certificates.records[0].common_name }}"
        type: root_ca
        signing_request: "{{ csr }}"
        expiry_time: "P{{ cluster_api_certificate_expiry_days }}DT"
      register: signed_cert_output
      delegate_to: localhost

      # parse the signed certificate and private key
      # the parse_pem_output is a custom filter that is defined in the filter_plugins folder
    - name: get the signed certificate
      set_fact: 
        signed_certificate: "{{ signed_cert_output.ontap_info.public_certificate | parse_pem_output('CERTIFICATE') }}"
        private_key: "{{ csr_output.msg.cli_output | parse_pem_output('PRIVATE KEY') }}"

    - debug: 
        var: signed_certificate 
        verbosity: 2

      # create the api certificates folder
    - name: create the api certificates folder, if it does not exist
      file:
        path: "{{ cluster_api_certificate_folder }}"
        state: directory
        mode: 0755
      delegate_to: localhost

      # save the certificate and key
    - name: save the certificate and key
      copy:
        content: "{{ signed_certificate }}"
        dest: "{{ cluster_api_cert_filepath }}"
        force: yes
      delegate_to: localhost

    - name: save the private key
      copy:
        content: "{{ private_key }}"
        dest: "{{ cluster_api_key_filepath }}"
        force: yes
      delegate_to: localhost

    when: ((not cert_file_stat.stat.exists and (expiry_diff.days | default(0) | int) < (cluster_api_certificate_expiry_threshold_days | int)) or force_create | default(false))
    # end of create cert block

    # create api user
  - name: create the api user
    netapp.ontap.na_ontap_user:
      <<: *auth
      state            : present
      name             : "{{ cluster_api_username }}"
      role_name        : "{{ cluster_api_role }}"
      application_dicts:  
        - application: ontapi
          authentication_methods: cert
        - application: http
          authentication_methods: cert
    delegate_to: localhost

  - name: test the api user
    netapp.ontap.na_ontap_rest_info:
      <<: *auth_cert
      use_python_keys: true
      fields:
        - name
      gather_subset:
        - security/certificates
      parameters:
        name: "{{ cluster_api_username }}"
    register: api_user_info
    delegate_to: localhost
    retries: 2
    delay: 3
