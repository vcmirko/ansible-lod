---
# set auth dict, to be reused everywhere
- name: "Role - ontap/simulator/cluster_config"
  block:
  - name: Set authentication facts
    no_log: true
    set_fact:
      auth: &auth
        hostname: "{{ netapp_hostname }}"
        username: "{{ netapp_username }}"
        password: "{{ netapp_password }}"
        https: true
        validate_certs: false
        use_rest: always

  - name: 'Wait for cluster to stabilize'
    wait_for: 
      timeout: 60
    delegate_to: localhost

  # we set the timezone
  - name: set timezone
    netapp.ontap.na_ontap_rest_cli:
      verb: PATCH
      command: "cluster/date"
      body:
        timezone: "{{ cluster_timezone }}"
      <<: *auth
    delegate_to: localhost

  # we set the location on all nodes
  - name: get nodes
    netapp.ontap.na_ontap_rest_info:
      <<: *auth
      gather_subset:
        - cluster/nodes
      fields:
        - name
    delegate_to: localhost
    register: nodes_result

  # unlock the diag user
  - name: Unlock User diag
    netapp.ontap.na_ontap_user:
      state                : present
      name                 : diag
      applications         : console
      authentication_method: password
      lock_user            : false
      role_name            : admin
      # vserver              : "{{ cluster_name }}"
      <<: *auth
    delegate_to: localhost
    ignore_errors: true

  # loop the licenses
  - name: Add licenses
    netapp.ontap.na_ontap_license:
      state        : present
      license_codes: "{{ cluster_license_codes }}"
      <<: *auth
    delegate_to: localhost

  # we assign 20 disks
  - name: Assign disks
    netapp.ontap.na_ontap_disks:
      node      : "{{ nodes[0].name }}"
      disk_count: 20
      min_spares: 0
      disk_type : FCAL
      <<: *auth
    delegate_to: localhost

  # we create a first aggregate of 6 disks
  - name: create aggr1
    netapp.ontap.na_ontap_aggregate:
      state          : present
      name           : aggr1
      raid_type      : raid_dp
      disk_count     : 6
      raid_size      : 6
      nodes          : "{{ nodes[0].name }}"
      wait_for_online: true
      time_out       : 18000
      service_state  : online
      <<: *auth
    delegate_to: localhost

  # set dns
  - name: create DNS on cluster
    netapp.ontap.na_ontap_dns:
      state      : present
      vserver    : "{{ cluster_name }}"
      domains    : "{{ cluster_dns_domain }}"
      nameservers: "{{ cluster_dns_server }}"
      <<: *auth
    delegate_to: localhost

  # we create a broadcast domain for every vlan we want
  - name: create Broadcast domains
    netapp.ontap.na_ontap_broadcast_domain:
      state: present
      name: "vlan-{{ vlan_id }}"
      mtu: 1500
      ipspace: Default
      <<: *auth
    delegate_to: localhost
    loop_control:
      loop_var: vlan_id
      label: 'Creating vlan {{ vlan_id }}'
    loop: "{{ cluster_vlans }}"


  # we create the vlan's
  - name: create VLANs
    netapp.ontap.na_ontap_net_vlan:
      state: present
      vlanid: "{{ vlan_id }}"
      parent_interface: "{{ cluster_vlan_port }}"
      node: "{{ nodes[0].name }}"
      broadcast_domain: "vlan-{{ vlan_id }}"
      ipspace: "Default"
      <<: *auth
    delegate_to: localhost
    loop_control:
      loop_var: vlan_id
      label: 'Creating vlan {{ vlan_id }}'
    loop: "{{ cluster_vlans }}"

  # we add the vlan's to the broadcast domains
  - name: add vlans to broadcast domain
    netapp.ontap.na_ontap_broadcast_domain:
      state: present
      name: "vlan-{{ vlan_id }}"
      mtu: 1500
      ipspace: Default
      ports: ["{{nodes[0].name}}:{{ cluster_vlan_port }}-{{ vlan_id }}"]
      <<: *auth
    delegate_to: localhost
    loop_control:
      loop_var: vlan_id
      label: 'Creating broadcast domain vlan-{{ vlan_id }}'
    loop: "{{ cluster_vlans }}"

  # and we create the cluster mgmt lif
  - name: Create inter cluster lif
    na_ontap_interface:
      state: present
      interface_name: "ic"
      address: "{{ nodes[0].intercluster_ip }}"
      netmask: "{{ cluster_netmask }}"
      service_policy: default-intercluster
      ipspace: Default
      admin_status: up
      home_node: "{{ nodes[0].name }}"
      home_port: "{{ cluster_intercluster_port }}"
      <<: *auth
    delegate_to: localhost


