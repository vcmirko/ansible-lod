---
- name: "Role - maf/simulator/init_sim"
  block:
  - name: Set authentication
    set_fact:
      esxi_login: &esxi_login
        hostname: '{{ vcenter_host }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'
        validate_certs: no

  - name: Start VM
    community.vmware.vmware_guest:
      <<: *esxi_login
      name: '{{ simulator_vm_name }}'
      state: poweredon
      wait_for_ip_address: false
    delegate_to: localhost

  - name: Wait for 10 seconds
    wait_for: timeout=10
    delegate_to: localhost

  - name: Press Space to interrupt autoboot
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ simulator_vm_name }}"
      keys_send: '{{keystroke}}'
    delegate_to: localhost
    register: sendkeys_result
    retries: 3
    until: sendkeys_result is succeeded
    loop_control:
      loop_var: keystroke
    loop: [ SPACE, SPACE, SPACE, SPACE, SPACE ]

  - name: configure loader variable via sendkeys
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ simulator_vm_name }}"
      keys_send: ENTER
      string_send: "{{ env_command }}"
    delegate_to: localhost
    register: sendkeys_result
    retries: 3
    until: sendkeys_result is succeeded
    loop_control:
      loop_var: env_command
    loop: 
      # set the node's unique identifiers
      - "setenv SYS_SERIAL_NUM {{simulator_sys_serial_number}}"
      - "setenv bootarg.nvram.sysid {{simulator_nvram_sysid}}"
      # configure the simulated disk shelves
      - "setenv bootarg.vm.sim.vdevinit {{simulator_vdevinit}}"
      - "setenv bootarg.sim.vdevinit {{simulator_vdevinit}}"
      # set automatic 4a
      - "setenv bootarg.bootmenu.allow_opts true"
      - "setenv bootarg.bootmenu.args 4a"
      - "setenv bootarg.init.initnextV2 true"
      - "setenv bootarg.init.wipeclean true"
      # make the node discoverable on the cluster network
      - "setenv bootarg.init.auto_cluster_lif.disable false"
      # Enable dhcp for node_mgmt
      - "setenv bootarg.init.dhcp.disable false"
      - "" # this is here to force the enter key after the preceding command

  - name: verbose console
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ simulator_vm_name }}"
      keys_send: ENTER
      string_send: "{{ env_command }}"
    delegate_to: localhost
    register: sendkeys_result
    retries: 3
    until: sendkeys_result is succeeded
    loop_control:
      loop_var: env_command  
    loop:
      - "setenv boot_verbose true"
      - "setenv bootarg.init.console_muted false"
      - ""
    when:
      - not simulator_console_muted | default(true)

  # This prevents duplicate sysids from being used when the role is called
  # multiple times within a playbook's tasks section.
  - name: clear nvram_sysid
    set_fact:
      nvram_sysid: ""

  - name: set extra bootargs
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ simulator_vm_name }}"
      keys_send: ENTER
      string_send: "set {{bootarg}}"
    delegate_to: localhost
    register: sendkeys_result
    retries: 3
    until: sendkeys_result is succeeded
    loop_control:
      loop_var: bootarg
    loop: "{{simulator_bootargs}}"
    when: simulator_bootargs is defined
    
  - name: boot_ontap
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ simulator_vm_name }}"
      keys_send: ENTER
      string_send: "{{ item }}"
    delegate_to: localhost
    loop: 
      - "boot_ontap"
      - "" # this is here to force the enter key after the preceding command

  - name: Wait for VMware tools to become available
    community.vmware.vmware_guest_tools_wait:
      <<: *esxi_login
      name: '{{ simulator_vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded 
