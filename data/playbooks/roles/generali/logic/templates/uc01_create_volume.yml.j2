# ==============================================================================
# META DATA - to help make logical decisions or naming conventions
# ==============================================================================

meta:
  volume_style: "{{ ansibleVolStyle | default('MIX') }}"                # MIX, SMB, NFS
  volume_junction: "{{ ansibleJun | default(none) }}"                   # xxxx => /xxxx
  volume_performace_class: "{{ ansibleVolPerfCls | default('A') }}"     # A, B, C, D
  volume_dr: "{{ ansibleVolDR | default(none) }}"                       # '0', '1', '2', '9'
  volume_autosize: "{{ ansibleAutoSize | default(False) | bool }}"      # True or False
  country: "{{ ansibleCountry | default(none) }}"                       # IT, DE, ...
  data_type: "{{ ansibleDataType | default('APP') }}"                   # APP, DB, ...
  protection: "{{ ansibleProtection | default(none) }}"                 # not used
  service_level: "{{ ansibleSerLev | default(none) }}"                  # 'S1', 'M1', ...
  is_ivz: "{{ ansibleVserver.startswith('SVM_IT_') | bool }}"           # True or False
  snapmirror_policy: "{{ ansibleVolSnapMirrVaultPol | default(none) }}" # VP_30D, ...

# ==============================================================================
# PRIMARY ENVIRONMENT
# ==============================================================================

primary: 
  cluster: &primary_cluster
    management_ip: "{{ ansibleHost | default(none) }}"
    name: "{{ ansibleHostName | default(none) }}"
  svm: &primary_svm
    name: "{{ ansibleVserver | default(none) }}"

  # cifs_share => potentially added in logic script if MIX or SMB

  volume: &primary_volume
    type: rw
    name: &primary_volume_name "{{ ansiblePrimaryVol | default(none) }}" 
    # junction_path: => added in logic script
    aggregate:
      name:                 "{{ ansibleAggr | default(none) }}"        
    security_style:         "{{ ansibleVolNetAppStyle | default(none) }}"
    percent_snapshot_space: {{ ansibleVolSnapReserve | default(0) }}
    snapshot_policy: 
      name:                 "{{ ansibleVolSnapPol | default('none') }}"

    # qos_adaptive_policy_group:
    #   name: => added in logic script
    
    efficiency_policy:
      name:                 "{{ ansibleEffPol | default('auto') }}"
    size:                   {{ ansibleVolSize | default(none) | int }}
    comment:                "{{ ansibleVolDesc | default(none) }}"
    language:               "{{ ansibleVolLang | default('c.utf-8') }}"
    export_policy: 
      #name : added in logic script  
    volume_autosize:
      maximum_size            : "{{ ansibleAutoSizeMaxSize | default(100000) }}{{ (ansibleAutoSizeIncSize | default('g'))[0] | lower }}" # 100g
      minimum_size            : "{{ ansibleAutoSizeMinSize | default(0) }}{{ (ansibleAutoSizeIncSize | default('g'))[0] | lower }}" # 50g
      mode                    : "{{ ansibleAutoSizeMode | default('off') }}"
      shrink_threshold_percent: "{{ ansibleAutoSizeShrinkPct | default(0) }}"
      grow_threshold_percent  : 85
  export_policy: &primary_export_policy
    #name : added in logic script
    rules: # potentially removed in logic script
    - client_match: "{{ ansibleCliMatch | default('0.0.0.0/0') }}"     
      ro_rule:      "{{ ansibleRoRule | default('any') }}"
      rw_rule:      "{{ ansibleRwRule | default('any') }}"
      protocol:     "nfs,nfs3,nfs4"
      super_user_security: "{{ ansibleSuperUserSec | default('any') }}"
      allow_suid: true           
  cmdb: &primary_cmdb
    sql_insert: "{{ ansibleSqlInsert | default(none) }}"

# ==============================================================================
# BACKUP LOCAL ENVIRONMENT
# ==============================================================================

backup_local:
  cluster: &backup_local_cluster
    management_ip: "{{ ansibleHostBL | default(none) }}"
    name: "{{ ansibleHostBLName | default(none) }}"
  svm: 
    name: "" # added in logic script
  volume: &backup_local_volume
    <<: *primary_volume                                     # inherit from primary

    # qos_adaptive_policy_group:
    #   name: => added in logic script

    name: "" # added in logic script
    aggregate:                                                           # custom aggregate
      name: "{{ ansibleAggrBL | default(none) }}"
    type: dp                                                             # type dp
    snapshot_policy:                                                     # no snapshots
      name: none                          
    percent_snapshot_space: 0                                            # no snapreserve
    tiering_policy:                                                      # auto tiering
      name: auto                          
    volume_autosize:                                                     # custom autosize
      maximum_size            : "51200{{ (ansibleAutoSizeIncSize | default('g'))[0] | lower }}" # 51200g
      minimum_size            : "{{ ansibleAutoSizeMinSize | default(0) }}{{ (ansibleAutoSizeIncSize | default('g'))[0] | lower }}" # ex 50g
      mode                    : grow_shrink
      shrink_threshold_percent: "{{ ansibleAutoSizeShrinkPct | default(0) }}"    
      grow_threshold_percent  : 85   
  export_policy:
    <<: *primary_export_policy 
  cmdb: 
    <<: *primary_cmdb
  snapmirror:
    conditions: &snapmirror_conditions
      state: "snapmirrored"
      transfer_state: "idle"
    source: &snapmirror_source
      cluster: *primary_cluster
      svm: *primary_svm
      volume: 
        name: *primary_volume_name
    destination:
      cluster: *backup_local_cluster
      svm: 
        name: "" # added in logic script
      volume:
        name: "" # added in logic script

# ==============================================================================
# BACKUP REMOTE ENVIRONMENT
# ==============================================================================

backup_remote:
  cluster: &backup_remote_cluster
    management_ip: "{{ ansibleHostBR | default(none) }}"
    name: "{{ ansibleHostBRName | default(none) }}"
  svm: 
    name: "" # added in logic script
  volume:
    <<: *backup_local_volume                                              # inherit from backup_local

    # qos_adaptive_policy_group:
    #   name: => added in logic script    

    name: "" # added in logic script
    aggregate:                                                            # custom aggregate
      name: "{{ ansibleAggrBR | default(none) }}"
  export_policy:
    <<: *primary_export_policy       
  cmdb:
    <<: *primary_cmdb
  snapmirror:
    conditions: 
      <<: *snapmirror_conditions
    source:
      <<: *snapmirror_source
    destination:
      cluster: *backup_remote_cluster
      svm: 
        name: "" # added in logic script
      volume:
        name: "" # added in logic script

# ==============================================================================
# ADPE ENVIRONMENT
# ==============================================================================

adpe:
  cluster: &adpe_cluster
    management_ip: "{{ ansibleHostAP | default(none) }}"
    name: "{{ ansibleHostAPName | default(none) }}"
  svm: 
    name: "" # added in logic script
  volume:
    <<: *backup_local_volume                                       # inherit from backup_local

    # qos_adaptive_policy_group:
    #   name: => added in logic script

    name: "" # added in logic script
    aggregate:                                                     # custom aggregate
      name: "{{ ansibleAggrAP | default(none) }}"
  export_policy:
    <<: *primary_export_policy       
  cmdb:
    <<: *primary_cmdb
  snapmirror:
    conditions:
      <<: *snapmirror_conditions
    source:
      <<: *snapmirror_source
    destination:
      cluster: *adpe_cluster
      svm: 
        name: "" # added in logic script
      volume:
        name: "" # added in logic script
