- name: Table unique
  type: ansible
  playbook: dummy.yaml
  help: |
    This is an example of a table with unique entries. Using expressions and validation.
  description: "Make sure table entries are unique"
  roles:
    - admin
  categories: 
  - Examples
  tileClass: has-background-info-light
  icon: bullseye
  fields:
    - name: machinelist
      type: expression
      value:
        - mach1
        - mach2
        - mach3
        - mach4
    - name: usedMachinelist
      type: expression
      runLocal: true
      expression: $(machines).map(x => x.Machine)
    - name: unusedMachinelist
      type: expression
      runLocal: true
      expression: $(machinelist).filter( x => !$(usedMachinelist).includes(x))
    - type: table
      name: machines
      label: Add a machine
      allowInsert: true
      allowDelete: true
      insertMarker: isNewItem
      deleteMarker: isRemovedItem
      validIfNot:
        field: hasIdDoubles
        description: This table must have unique id's
      readonlyColumns:
        - Machine
        - hostname
      required: true
      tableFields:
        - name: Machine
          label: pick a machine
          type: enum
          required: true
          from: unusedMachinelist
        - name: Id
          label: Give a unique id
          type: text
          required: true
    - name: idList
      type: expression
      runLocal: true
      expression: $(machines).map(x => x.Id)
    - name: hasIdDoubles
      type: expression
      runLocal: true
      expression: ((x) => new Set(x).size !== x.length)($(idList))
- name: Html
  type: ansible
  playbook: dummy.yaml
  description: "Show you can use html in a field"
  roles:
    - admin
  categories: []
  tileClass: has-background-info-light
  icon: bullseye
  fields:
    - name: field1
      type: html
      expression: "'<b>Hohoho</b>'.toUpperCase()"
    - name: field2
      type: html
      expression: "'<img src=\"https://www.w3schools.com/images/w3schools_green.jpg\" alt=\"W3Schools.com\" width=\"104\" height=\"142\">'"
- name: Expression Queries
  showHelp: true
  help: >
    This demo grabs information, using various builtin functions.
    [Read more here](https://github.com/ansibleguy76/ansibleforms/wiki/3.-FAQ#advanced-functions)
  roles:
    - public
  description: An example of the power of expression based queries
  categories:
    - Demo
    - Expressions
    - Queries
  tileClass: has-background-warning-light
  playbook: dummy.yaml
  inventory: ""
  type: ansible
  fields:
    - type: enum
      name: user
      label: Data with Rest (live from internet)
      default: __auto__
      required: true
      outputObject: true
      multiple: false
      icon: user
      expression: fn.fnRestBasic('get','https://gorest.co.in/public/v1/users','','','[.data[]]')
      columns:
        - name
        - email
      valueColumn: id
      previewColumn: name
    - type: enum
      expression: fn.fnReadYamlFile('/app/dist/persistent/forms.yaml','[.forms[]]')
      name: forms
      multiple: true
      outputObject: false
      label: Data from Yaml (reading our own forms.yaml)
      default: __auto__
      required: false
      icon: building
      columns:
        - name
        - type